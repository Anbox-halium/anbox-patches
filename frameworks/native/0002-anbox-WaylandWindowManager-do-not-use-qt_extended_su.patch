From 4d43737bd4776ef0067a2bc73cbd3542ab1a84a2 Mon Sep 17 00:00:00 2001
From: Asriel Dreemurr <asriel.danctnix@gmail.com>
Date: Fri, 6 Nov 2020 14:24:22 +0700
Subject: [PATCH 2/5] (anbox) WaylandWindowManager: do not use
 qt_extended_surface extension (not available in newer QtWayland)

Change-Id: I4241246d58fde1119ed0102e7eb804ebec17c731
---
 .../WaylandSingleWindowManager.cpp            | 28 -------------------
 .../WaylandSingleWindowManager.h              | 19 -------------
 .../DisplayHardware/WaylandWindowManager.cpp  |  4 ---
 3 files changed, 51 deletions(-)

diff --git a/services/surfaceflinger/DisplayHardware/WaylandSingleWindowManager.cpp b/services/surfaceflinger/DisplayHardware/WaylandSingleWindowManager.cpp
index a26bbd093..7cf286bf6 100644
--- a/services/surfaceflinger/DisplayHardware/WaylandSingleWindowManager.cpp
+++ b/services/surfaceflinger/DisplayHardware/WaylandSingleWindowManager.cpp
@@ -15,15 +15,7 @@ int WaylandSingleWindowManager::initialize()
     ALOGW("getting shell surface");
     w_shell_surface = wl_shell_get_shell_surface(shell, w_surface);
 
-    ALOGW("getting qt_extended surface");
-    q_extended_surface = (struct qt_extended_surface*)wl_proxy_create((struct wl_proxy *)q_surface_extension, &qt_extended_surface_interface);
-
-    wl_proxy_marshal((struct wl_proxy*)q_surface_extension, QT_SURFACE_EXTENSION_GET_EXTENDED_SURFACE, q_extended_surface, w_surface);
-
     ALOGW("adding listeners");
-    wl_proxy_add_listener((struct wl_proxy*)q_extended_surface, (void (**)(void))&extended_surface_listener, this);
-    wl_display_roundtrip(dpy);
-
     wl_shell_surface_add_listener(w_shell_surface, &shell_surface_listener, NULL);
 
     wl_shell_surface_set_toplevel(w_shell_surface);
@@ -109,25 +101,6 @@ void WaylandSingleWindowManager::shell_surface_popup_done(void *data, struct wl_
     ALOGW("shell surface popup done");
 }
 
-void WaylandSingleWindowManager::handle_onscreen_visibility(void *data, struct qt_extended_surface *qt_extended_surface, int32_t visible)
-{
-    WaylandSingleWindowManager *self = (WaylandSingleWindowManager*)data;
-    ALOGW("qt_extended_surface handle onscreen visibility");
-}
-
-void WaylandSingleWindowManager::handle_set_generic_property(void *data, struct qt_extended_surface *qt_extended_surface, const char *name, struct wl_array *value)
-{
-    ALOGW("qt_extended_surface handle set generic property");
-}
-
-void WaylandSingleWindowManager::handle_close(void *data, struct qt_extended_surface *qt_extended_surface)
-{
-    ALOGW("qt_extended_surface handle close");
-
-    //WaylandSingleWindowManager *self = (WaylandSingleWindowManager*)data;
-    //self->handle_close_impl(self->w_surface);
-}
-
 void WaylandSingleWindowManager::frame_callback(void *data, struct wl_callback *callback, uint32_t time)
 {
     WaylandSingleWindowManager *self = (WaylandSingleWindowManager*)data;
@@ -143,7 +116,6 @@ int WaylandSingleWindowManager::finalize()
     }
     buffer_map.clear();
 
-    wl_proxy_destroy((struct wl_proxy *)q_extended_surface);
     wl_shell_surface_destroy(w_shell_surface);
     wl_surface_destroy(w_surface);
     return 0;
diff --git a/services/surfaceflinger/DisplayHardware/WaylandSingleWindowManager.h b/services/surfaceflinger/DisplayHardware/WaylandSingleWindowManager.h
index 7ba435a07..c75042b55 100644
--- a/services/surfaceflinger/DisplayHardware/WaylandSingleWindowManager.h
+++ b/services/surfaceflinger/DisplayHardware/WaylandSingleWindowManager.h
@@ -9,13 +9,6 @@
 
 #include <wayland-android-client-protocol.h>
 
-struct qt_extended_surface_listener
-{
-    void (*onscreen_visibility)(void *data, struct qt_extended_surface *qt_extended_surface, int32_t visible);
-    void (*set_generic_property)(void *data, struct qt_extended_surface *qt_extended_surface, const char *name, struct wl_array *value);
-    void (*close)(void *data, struct qt_extended_surface *qt_extended_surface);
-};
-
 class WaylandSingleWindowManager : public WaylandWindowManager
 {
 private:
@@ -28,20 +21,10 @@ private:
 
     struct wl_shell_surface_listener shell_surface_listener = {&shell_surface_ping, &shell_surface_configure, &shell_surface_popup_done};
 
-    static void handle_onscreen_visibility(void *data, struct qt_extended_surface *qt_extended_surface, int32_t visible);
-    static void handle_set_generic_property(void *data, struct qt_extended_surface *qt_extended_surface, const char *name, struct wl_array *value);
-    static void handle_close(void *data, struct qt_extended_surface *qt_extended_surface);
-
     static void buffer_release(void *data, struct wl_buffer *buffer);
 
     static void frame_callback(void *data, struct wl_callback *callback, uint32_t time);
 
-    const struct qt_extended_surface_listener extended_surface_listener = { 
-        &handle_onscreen_visibility,
-        &handle_set_generic_property,
-        &handle_close,
-    };
-
     const struct wl_buffer_listener w_buffer_listener = {
         buffer_release
     };
@@ -52,8 +35,6 @@ private:
 
     struct wl_callback *frame_callback_ptr;
 
-    struct qt_extended_surface *q_extended_surface;
-
 public:
     int initialize() override;
     void pushFrame(std::vector<std::string> layer_names, buffer_handle_t buffer, int width, int height, int stride, int pixel_format) override;
diff --git a/services/surfaceflinger/DisplayHardware/WaylandWindowManager.cpp b/services/surfaceflinger/DisplayHardware/WaylandWindowManager.cpp
index 7ef986924..a6b30fa9e 100644
--- a/services/surfaceflinger/DisplayHardware/WaylandWindowManager.cpp
+++ b/services/surfaceflinger/DisplayHardware/WaylandWindowManager.cpp
@@ -65,10 +65,6 @@ void WaylandWindowManager::registry_add_object(void *data, struct wl_registry *r
     {
         self->seat = (struct wl_seat*)wl_registry_bind(registry, name, &wl_seat_interface, 0);
     }
-    else if(strcmp(interface, "qt_surface_extension") == 0)
-    {
-        self->q_surface_extension = (struct qt_surface_extension*)wl_registry_bind(registry, name, &self->qt_surface_extension_interface, 0);
-    }
     else if(strcmp(interface, "android_wlegl") == 0)
     {
         self->a_android_wlegl = static_cast<struct android_wlegl*>(wl_registry_bind(registry, name, &android_wlegl_interface, 1));
-- 
2.28.0

